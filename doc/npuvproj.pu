@startuml npuvproj

hide empty methods
hide empty members

set namespaceSeparator .

namespace net.minecraft {
	namespace creativetab {
		class CreativeTabs
	}
	namespace item {
		class Item
		class ItemStack
	}
	namespace block {
		class Block
	}
}

namespace top.npucraft.npuvproj {
	namespace utils {
		class Config {
			+ {static} ModId: String
			+ {static} ModName: String
			+ {static} ModVersion: String
			+ {static} IncludeFooBarSamples: boolean
		}

		namespace onthefly {
			class JavaStringCompiler {
				- compiler: JavaCompiler
				- stdManager: StandardJavaFileManager
				+ JavaStringCompiler()
				+ Map<String, byte[]> compile(String fileName, String source)
				+ Class<?> loadClass(String name, Map<String, byte[]> classBytes)
			}
			note bottom of JavaStringCompiler {
				JavaStringCompiler 是一个运行时类编译器
				在 npuvproj 主要用于高复现性类的自动生成
			}
		}
	}

	namespace proxy {
		interface IProxy {
			+ void onFingerprintViolation(FMLFingerprintViolationEvent e)
			+ void onPreInitialize(FMLPreInitializationEvent e)
			+ void onInitialize(FMLInitializationEvent e)
			+ void onPostInitialize(FMLPostInitializationEvent e)
			+ void onServerAboutToStart(FMLServerAboutToStartEvent e)
			+ void onServerStarting(FMLServerStartingEvent e)
			+ void onServerStarted(FMLServerStartedEvent e)
			+ void onServerStopping(FMLServerStoppingEvent e)
			+ void onServerStopped(FMLServerStoppedEvent e)
		}

		abstract CommonProxy
		note bottom of CommonProxy {
			CommonProxy 并非 forge 模组必不可少的部分
			设计 CommonProxy 的目的仅仅在于更方便地划分模组在客户端和服务端的不同行为
			在 npuvproj 的设计中， CommonProxy 应当包含客户端和服务端共有的行为
			ServerProxy 独立负责处理服务端特有的行为逻辑
			ClientProxy 独立负责处理客户端特有的行为逻辑
			CommonProxy 将被置为抽象类以强制子类实现端的附加行为逻辑，即使其为空
		}
		CommonProxy .left.|> IProxy
		CommonProxy ..> top.npucraft.npuvproj.utils.Config

		class ServerProxy
		ServerProxy -right-|> CommonProxy

		class ClientProxy
		ClientProxy -right-|> CommonProxy
		ClientProxy ..> top.npucraft.npuvproj.utils.Config
		ClientProxy -[hidden]> ServerProxy
	}

	class ModEntry {
		+ instance: ModEntry
		+ {static} proxy: CommonProxy
		+ void onFingerprintViolation(FMLFingerprintViolationEvent e)
		+ void onPreInitialize(FMLPreInitializationEvent e)
		+ void onInitialize(FMLInitializationEvent e)
		+ void onPostInitialize(FMLPostInitializationEvent e)
		+ void onServerAboutToStart(FMLServerAboutToStartEvent e)
		+ void onServerStarting(FMLServerStartingEvent e)
		+ void onServerStarted(FMLServerStartedEvent e)
		+ void onServerStopping(FMLServerStoppingEvent e)
		+ void onServerStopped(FMLServerStoppedEvent e)
	}
	ModEntry o--> top.npucraft.npuvproj.proxy.CommonProxy
	ModEntry ..> top.npucraft.npuvproj.utils.Config

	namespace creativetab {
		class CreativeTabEx {
			+ {static} DefaultLabelTextColor: int
			+ {static} DefaultGuiCreativeLeftWidth: int
			+ {static} DefaultSearchFieldWidth: int
			- hasSearchBar_: boolean
			- hasLabel_: boolean
			- labelTextColor_: int
			- iconItem_: Item
			+ CreativeTabsEx(String label)
			+ {static} CreativeTabs findFirstOf(String label)
			+ {static} CreativeTabsEx findFirstOfLocal(String label)
			+ CreativeTabsEx withIconItem(Item itemIn)
			+ CreativeTabsEx withLabel(boolean enabled, String hexRGB)
			+ CreativeTabsEx withSearchBar(boolean enabled)
			+ int getLabelColor()
			+ boolean hasSearchBar()
			+ int getSearchbarWidth()
			+ boolean drawInForegroundOfTab()
			+ ItemStack getTabIconItem()
		}
		CreativeTabEx -up-|> net.minecraft.creativetab.CreativeTabs
		CreativeTabEx .up.> net.minecraft.item.Item
		CreativeTabEx .up.> net.minecraft.item.ItemStack
		CreativeTabEx ..> top.npucraft.npuvproj.utils.Config
		note bottom of CreativeTabEx {
			CreativeTabs 的配置增强版本
			推荐 npuvproj 自定义物品的栏目都由 CreativeTabEx 定义
		}
	}

	namespace item {
		class ItemBuilder {
			- item_: Item
			+ ItemBuilder(Item item)
			+ ItemBuilder withRegistryName(String name)
			+ ItemBuilder withCreativeTab(String name)
			+ Item build()
		}
		ItemBuilder ..> top.npucraft.npuvproj.utils.Config

		class ItemBus {
			+ {static} void registerItem(Item itemIn)
			+ {static} void registerItemBlock(Block blockIn)
			+ {static} Item getRegisteredItem(String name)
		}
		ItemBus -[hidden]> ItemBuilder
		ItemBus ..> top.npucraft.npuvproj.proxy.CommonProxy
		ItemBus ..> top.npucraft.npuvproj.utils.Config
	}

	namespace block {
		class BlockBuilder {
			- block_: Block
			+ BlockBuilder(Block block)
			+ BlockBuilder withRegistryName(String name)
			+ BlockBuilder withCreativeTab(String name)
			+ Block build()
		}
		BlockBuilder ..> top.npucraft.npuvproj.utils.Config

		class BlockBus {
			+ {static} void registerBlock(Block blockIn)
			+ {static} Block getRegisteredBlock(String name)
		}
		BlockBus -[hidden]> BlockBuilder
		BlockBus ..> top.npucraft.npuvproj.item.ItemBus
		BlockBus ..> top.npucraft.npuvproj.proxy.CommonProxy
		BlockBus ..> top.npucraft.npuvproj.utils.Config

		interface IBlockCollision {
			+ AxisAlignedBB getCurrentBB(IBlockState state, IBlockAccess source, BlockPos pos)
			+ RayTraceResult collisionTest(IBlockState blockState, World worldIn, BlockPos pos, Vec3d start, Vec3d end)
		}
		note left of IBlockCollision {
			IBlockCollision 统一方块碰撞模型接口
			推荐在 npuvproj 使用其实现管理方块模型的碰撞箱
		}

		abstract BlockCollision {
			+ BlockCollision(Material blockMaterialIn, MapColor blockMapColorIn)
			+ BlockCollision(Material materialIn)
			+ AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
			+ RayTraceResult collisionRayTrace(IBlockState blockState, World worldIn, BlockPos pos, Vec3d start, Vec3d end)
		}
		BlockCollision --|> net.minecraft.block.Block
		BlockCollision .up.|> IBlockCollision

		abstract CubicBlock {
			# bb_: AxisAlignedBB
			+ CubicBlock(Material blockMaterialIn, MapColor blockMapColorIn)
			+ CubicBlock(Material materialIn)
			+ CubicBlock withBoundingBox(AxisAlignedBB bb)
			+ AxisAlignedBB getCurrentBB(IBlockState state, IBlockAccess source, BlockPos pos)
			+ RayTraceResult collisionRayTrace(IBlockState blockState, World worldIn, BlockPos pos, Vec3d start, Vec3d end)
		}
		CubicBlock -up-|> BlockCollision

		abstract HeterotypeBlock {
			+ HeterotypeBlock(Material blockMaterialIn, MapColor blockMapColorIn)
			+ HeterotypeBlock(Material materialIn)
			+ RayTraceResult collisionRayTrace(IBlockState blockState, World worldIn, BlockPos pos, Vec3d start, Vec3d end)
		}
		HeterotypeBlock -up-|> BlockCollision

		interface IBlockWithDirectionProperty {
			+ PropertyDirection getDirectionProperty()
			+ AxisAlignedBB getRedirecredBB(AxisAlignedBB bb, IBlockState state, IBlockAccess source, BlockPos pos)
		}
		IBlockWithDirectionProperty -[hidden]> BlockCollision
	}
}

@enduml
